{"name": "test_cred_001", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home", "trace": "self = <selenium.webdriver.chrome.service.Service object at 0x0000020D2D9AB350>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n>           self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE)\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: ['chromedriver', '--port=55730']>, args = 'chromedriver --port=55730', executable = None, preexec_fn = None, close_fds = False\npass_fds = (), cwd = None\nenv = environ({'TERM_SESSION_ID': 'f45a92f4-6959-4d6f-a0ea-887b2fe3b89d', 'ZES_ENABLE_SYSMAN': '1', 'PROGRAMW6432': 'C:\\\\Pro...C:\\\\Program Files\\\\Common Files', 'PYTEST_CURRENT_TEST': 'testcases/test_file_001.py::Test_001::test_cred_001 (call)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x0000020D2D9C4850>, creationflags = 0, shell = False, p2cread = Handle(708), p2cwrite = 16, c2pread = -1\nc2pwrite = Handle(720), errread = -1, errwrite = Handle(728), unused_restore_signals = True, unused_gid = None, unused_gids = None, unused_uid = None, unused_umask = -1\nunused_start_new_session = False, unused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Users\\Admin\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\subprocess.py:1538: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_file_001.Test_001 object at 0x0000020D2D71C190>\n\n    def test_cred_001(self):\n>       driver = webdriver.Chrome()\n\ntestcases\\test_file_001.py:6: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:73: in __init__\n    self.service.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.service.Service object at 0x0000020D2D9AB350>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE)\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.ENOENT:\n>               raise WebDriverException(\n                    \"'%s' executable needs to be in PATH. %s\" % (\n                        os.path.basename(self.path), self.start_error_message)\nE                       selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\service.py:81: WebDriverException"}, "start": 1691005972099, "stop": 1691005972102, "uuid": "6fa3dd39-acb9-46d0-b5dc-fe51f8b55dab", "historyId": "cc22e291bb4a0152a33f27fbe21bbbb3", "testCaseId": "cc22e291bb4a0152a33f27fbe21bbbb3", "fullName": "testcases.test_file_001.Test_001#test_cred_001", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_file_001"}, {"name": "subSuite", "value": "Test_001"}, {"name": "host", "value": "OFFICE-PC"}, {"name": "thread", "value": "4744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_file_001"}]}